# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];
    
  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" "i915" ];
  boot.extraModulePackages = [ ];
  boot.supportedFilesystems = [ "ntfs" ];
  # boot.kernelPackages = pkgs.linuxPackages_latest;

  # SSD Parititons

  fileSystems."/" =
    { device = "/dev/nvme0n1p2";
      fsType = "btrfs";
      options = [ "compress=zstd" "subvol=root" ];
    };

  fileSystems."/home" =
    { device = "/dev/nvme0n1p2";
      fsType = "btrfs";
      options = [ "subvol=home" ];
    };

  fileSystems."/nix" =
    { device = "/dev/nvme0n1p2";
      fsType = "btrfs";
      options = [ "compress=zstd" "subvol=nix" ];
    };

  fileSystems."/boot" =
    { 
      device = "/dev/nvme0n1p1";
      fsType = "vfat";
    };

  swapDevices = [ { device = "/dev/nvme0n1p8"; } ];

  # HDD Partitions

  fileSystems."/mnt/Treasury" = { 
      device = "/dev/sda3";
      fsType = "ntfs-3g"; 
      options = [ "rw" "defaults"];
    };
  
  fileSystems."/mnt/Industry" = { 
      device = "/dev/sda4";
      fsType = "ntfs-3g";
      options = [ "rw" "defaults"];
    };
  
  fileSystems."/mnt/Tavern" = { 
      device = "/dev/sda2";
      fsType = "ntfs-3g";
      options = [ "rw" "defaults"];
    };

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  services.btrfs.autoScrub.enable = true;
  services.btrfs.autoScrub.interval = "weekly";

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  hardware.ledger.enable = true;

  # Graphics Stuff

  environment.variables = {
    VDPAU_DRIVER = lib.mkIf config.hardware.opengl.enable (lib.mkDefault "va_gl");
  };

  # chromium = prev.chromium.override {
  #   # enable hardware accerlation with vaapi
  #   commandLineArgs = "--enable-features=VaapiVideoEncoder,VaapiVideoDecoder";
  # };

  hardware.opengl = {
    enable = true;
    driSupport = true;
    driSupport32Bit = true;
    extraPackages = with pkgs; [
      # intel-gmmlib
      intel-media-driver
      # intel-ocl
      libvdpau-va-gl
      libva
      libva-utils
      # vulkan-tools
      # vaapiIntel
      nvidia-vaapi-driver
      vaapiVdpau
      # mesa.drivers
    ];
    extraPackages32 = with pkgs.pkgsi686Linux; [nvidia-vaapi-driver];
  };

  hardware.nvidia = {
    modesetting.enable = true;
    open = false;
    nvidiaSettings = true; 
    package = config.boot.kernelPackages.nvidiaPackages.stable;
  };

  hardware.nvidia.prime = {
    offload = {
      enable = true;
      enableOffloadCmd = true;
    };
    intelBusId = "PCI:0:2:0";
    nvidiaBusId = "PCI:1:0:0";
  };
}
